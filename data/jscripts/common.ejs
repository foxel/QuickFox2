// PreInit

var myBrowser = {};myBrowser.Features = {xpath: !!(document.evaluate), air: !!(window.runtime), query: !!(document.querySelector)};
myBrowser.isDOM = (document.getElementById) ? true : false; //DOM1 browser (MSIE 5+, Netscape 6, Opera 5+)
myBrowser.isMSIE = (document.all && document.all.item && !window.opera) ? ((myBrowser.isDOM) ? 5 : 4) : false; //Microsoft Internet Explorer 4+
myBrowser.isOpera = (window.opera) ? ((myBrowser.isDOM) ? 5 : 4) : false; //Opera
myBrowser.isNetscape = (document.layers) ? ((myBrowser.isDOM && !myBrowser.isMSIE && !myBrowser.isOpera) ? 6 : 4) : false, //Netscape 4.*
myBrowser.isMozilla = myBrowser.isDOM && !myBrowser.isMSIE && !myBrowser.isOpera;
//myBrowser.presto = (!window.opera) ? false : ((arguments.callee.caller) ? 960 : ((document.getElementsByClassName) ? 950 : 925));
//myBrowser.trident = (!window.ActiveXObject) ? false : ((window.XMLHttpRequest) ? 5 : 4);
//myBrowser.webkit = (navigator.taintEnabled) ? false : ((myBrowser.Features.xpath) ? ((myBrowser.Features.query) ? 525 : 420) : 419);
myBrowser.gecko = (document.getBoxObjectFor == undefined) ? false : ((document.getElementsByClassName) ? 19 : 18);

//var xmlhttp = false;
//var _ms_xmlHttpVersion = "";

function isElement(itm)
{    return ((typeof itm).toLowerCase()=='object' && itm.tagName) ? true : false;
}

function getDocumentBody()
{
    return document.documentElement || document.body;
}

function getScrolls()
{
    var docElem = getDocumentBody();
    var scrollTop =  window.pageYOffset || docElem.scrollTop;
    var scrollLeft = window.pageXOffset || docElem.scrollLeft;
    return {x: scrollLeft, y: scrollTop};
}

// Get element by id

function qf_getbyid(id)
{
    var itm = null;

    if (document.getElementById)
        itm = document.getElementById(id);
    else if (document.all)
        itm = document.all[id];
    else if (document.layers)
        itm = document.layers[id];

    return itm;
}

// Show/hide

function toggleview(id)
{
    if (!id) return;
    var itm = null;
    if (itm = qf_getbyid(id))
    {
        if (itm.style.display == "none")
            qf_show_div(itm);
        else
            qf_hide_div(itm);
    }
}

// Set DIV ID to hide

function qf_hide_div(itm)
{
    if (!itm)
        return;
    itm.style.display = "none";
}

// Set DIV ID to show

function qf_show_div(itm)
{
    if (!itm)
        return;
    itm.style.display = "";
}

// Set DIV ID to hide

function qf_hide_div_id(id)
{
    var itm = null;
    if (itm = qf_getbyid(id))
        itm.style.display = "none";
}

// Set DIV ID to show

function qf_show_div_id(id)
{
    var itm = null;
    if (itm = qf_getbyid(id))
        itm.style.display = "";
}

function getAbsolutePos(itm)
{
   var obj = itm;
   var r = { x: obj.offsetLeft, y: obj.offsetTop };
   while (obj = obj.offsetParent)
   {
       r.x += obj.offsetLeft;
       r.y += obj.offsetTop;
   }
   return r;
}


function qf_show_div_mouse(id, evt)
{
  var mousex = evt.clientX;
  var mousey = evt.clientY;
  var pagexoff = 0;
  var pageyoff = 0;
  var obj = null;
  if (obj = qf_getbyid(id)) {
    var stl = getStyleObj(obj);

    if (myBrowser.isMSIE)
    {
      var oCanvas = document.getElementsByTagName(
        (document.compatMode && document.compatMode == 'CSS1Compat') ? 'HTML' : 'BODY'
      )[0];
      pagexoff = oCanvas.scrollLeft;
      pageyoff = oCanvas.scrollTop;
      var w_width  = oCanvas.clientWidth + oCanvas.scrollLeft;
    }
    else
    {
      pagexoff = window.pageXOffset;
      pageyoff = window.pageYOffset;
      var w_width  = window.innerWidth + window.pageXOffset;
    }

    //w_width = oCanvas.clientWidth ? oCanvas.clientWidth + oCanvas.scrollLeft : window.innerWidth + window.pageXOffset;


    if(stl){
      stl.display = '';
      var c_width = obj.offsetWidth;

      if (mousex + pagexoff + c_width > w_width)
        stl.left = w_width - c_width + 'px';
      else
        stl.left = (mousex+pagexoff-0.7*c_width) + 'px';

      stl.top = (mousey+pageyoff) + 25 + 'px';
    }
  }
  return true;
}

// some usefull functions from http://www.tigir.com/javascript.htm (modified ones)
// Thanks a lot
function isBody(element){
	return (/^(?:body|html)$/i).test(element.tagName);
};

function getElementComputedStyle(elem, prop)
{
    if (!isElement(elem))
        elem = document.getElementById(elem);

    // external stylesheet for Mozilla, Opera 7+ and Safari 1.3+
    if (document.defaultView && document.defaultView.getComputedStyle)
    {
        if (prop.match(/[A-Z]/)) prop = prop.replace(/([A-Z])/g, "-$1").toLowerCase();
        return document.defaultView.getComputedStyle(elem, "").getPropertyValue(prop);
    }

    // external stylesheet for Explorer and Opera 9
    if (elem.currentStyle)
    {
        var i;
        while ((i=prop.indexOf("-"))!=-1) prop = prop.substr(0, i) + prop.substr(i+1,1).toUpperCase() + prop.substr(i+2);
        return elem.currentStyle[prop];
    }

    return "";
}

var styleString = getElementComputedStyle;

function styleNumber(element, style)
{
	return parseInt(styleString(element, style), 10) || 0;
}

function getElementOffsetParent(element)
{
	if (!isElement(element) || isBody(element))
	    return null;
	if (element.offsetParent)
	    return element.offsetParent;
	while ((element = element.parentNode))
	{
		if (styleString(element, 'position') != 'static' || isBody(element))
		    return element;
	}
	return null;
}

function getStyleObj(itm)
{
    if ((typeof itm).toLowerCase()!='object')
        return null;
	return (myBrowser.isNetscape) ? itm : itm.style;
}

function mousePageXY(e)
{
    var x = 0, y = 0;

    if (!e) e = window.event;

    if (e.pageX || e.pageY)
    {
        x = e.pageX;
        y = e.pageY;
    }
    else if (e.clientX || e.clientY)
    {
        x = e.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft) - document.documentElement.clientLeft;
        y = e.clientY + (document.documentElement.scrollTop || document.body.scrollTop) - document.documentElement.clientTop;
    }

    return {x: x, y: y};
}

function getElementClientPos(itm)
{
    if (!isElement(itm))
        return null;

	if (this.getBoundingClientRect)
	{
		var bound = itm.getBoundingClientRect();
		return {x: parseInt(bound.left, 10), y: parseInt(bound.top, 10)};
	}

	var element = itm, position = {x: 0, y: 0}, isFixed = false;
	do
	{
		position.x += element.offsetLeft;
		position.y += element.offsetTop;

		if (myBrowser.gecko)
		{
			//if (!borderBox(element))
			//{
			//	position.x += leftBorder(element);
			//	position.y += topBorder(element);
			//}
			//var parent = element.parentNode;
			//if (parent && styleString(parent, 'overflow') != 'visible')
			//{
			//	position.x += leftBorder(parent);
			//	position.y += topBorder(parent);
			//}
		}
		isFixed = (styleString(element, 'position') == 'fixed');
		element = getElementOffsetParent(element);
	} while (element && !isBody(element) && !isFixed)
	//if (myBrowser.gecko && !borderBox(itm)){
	//	position.x -= leftBorder(itm);
	//	position.y -= topBorder(itm);
	//}

	var html = getDocumentBody(), scroll = getScrolls();
	position.x += html.clientLeft - ((isFixed) ? 0 : scroll.x);
	position.y += html.clientTop  - ((isFixed) ? 0 : scroll.y);
	return position;
}

// These functions are dirty hacks for IE 5.0 which does not increment a
// reference counter for an object passed via setTimeout(). So, if this
// object (closure function) is out of scope at the moment of timeout
// applying, IE 5.0 crashes.

// Timeout wrappers storage. Used to avoid zeroing of referece counts in IE 5.0.
// Please note that you MUST write "window.setTimeout", not "setTimeout", else
// IE 5.0 crashes again. Strange, very strange...

QF_TIMERS = function()
{    var TIMECTRLS = { s: window.setTimeout, c: window.clearTimeout };
    var onLoadFuncs = [];

    window.onload = function() {
        for (var i in onLoadFuncs)
        {            var func = onLoadFuncs[i];
            //if ((typeof func).toLowerCase() == 'function')
                func();
        }
    };

    // Wrapper for IE5 buggy setTimeout.
    // Use this function instead of a usual setTimeout().
    return {        setTimeout: function(func, dt)
        {
            // Always save inside the window object before a call (for FF)!
            window.QF_TIMERS_tmp = TIMECTRLS.s;
            if ((typeof func).toLowerCase() == 'string')
                id = window.QF_TIMERS_tmp(func, dt);
            else
            {
                var id = null;
                var mediator = function() {
                    func();
                    delete TIMECTRLS[id]; // remove circular reference
                }
                id = window.QF_TIMERS_tmp(mediator, dt);
                // Store a reference to the mediator function to the global array
                // (reference count >= 1); use timeout ID as an array key;
                TIMECTRLS[id] = mediator;
            }
            window.QF_TIMERS_tmp = null; // no delete() in IE5 for window
            return id;
        },

        // Complimental wrapper for clearTimeout.
        // Use this function instead of usual clearTimeout().
        clearTimeout: function(id) {
            window.QF_TIMERS_tmp = TIMECTRLS.c;
            delete TIMECTRLS[id]; // remove circular reference
            var r = window.QF_TIMERS_tmp(id);
            window.QF_TIMERS_tmp = null; // no delete() in IE5 for window
            return r;
        },

        addOnLoad: function(func) {            //if ((typeof func).toLowerCase() == 'function')
                onLoadFuncs.push(func);
        }
    }
}();

/*
QF_TIMERS.addOnLoad(function()
{    var inps = document.getElementsByTagName('input');
    for (var i in inps)
    {
        var type = 'input-' + (inps[i].type ? inps[i].type : 'text');
        if (inps[i].className)
            type += ' ' + inps[i].className
        inps[i].className = type;
    }
});
*/